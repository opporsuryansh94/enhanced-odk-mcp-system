#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Report Generation Agent for ODK MCP System

This agent is responsible for compiling analysis results from other agents
into comprehensive, formatted reports. It can generate reports in various
formats including Markdown, HTML, and PDF.

Author: ODK MCP System
"""

import os
import sys
import json
import logging
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime
import requests
from typing import Dict, List, Union, Optional, Any, Tuple
import io
import base64
import markdown
import jinja2
from weasyprint import HTML, CSS
import re

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class ReportGenerationAgent:
    """
    Agent for generating reports from ODK form data analysis.
    
    This agent compiles results from other analysis agents into
    comprehensive, formatted reports in various output formats.
    """
    
    def __init__(self, config_path: str = None):
        """
        Initialize the Report Generation Agent.
        
        Args:
            config_path (str, optional): Path to configuration file. If None, 
                                        uses default configuration.
        """
        self.config = self._load_config(config_path)
        self.daa_mcp_url = self.config.get('daa_mcp_url', 'http://localhost:5003/v1')
        self.auth_token = self.config.get('auth_token')
        
        # Initialize session for API calls
        self.session = requests.Session()
        if self.auth_token:
            self.session.headers.update({'Authorization': f'Bearer {self.auth_token}'})
        
        # Initialize Jinja2 environment for templates
        self.jinja_env = jinja2.Environment(
            loader=jinja2.FileSystemLoader(self.config['templates_dir']),
            autoescape=jinja2.select_autoescape(['html', 'xml'])
        )
    
    def _load_config(self, config_path: str) -> Dict:
        """
        Load configuration from file or use defaults.
        
        Args:
            config_path (str): Path to configuration file.
            
        Returns:
            Dict: Configuration dictionary.
        """
        default_config = {
            'daa_mcp_url': 'http://localhost:5003/v1',
            'auth_token': None,
            'output_dir': 'output/reports',
            'templates_dir': 'templates',
            'default_template': 'default_report.md',
            'default_css': 'default_style.css',
            'logo_path': None,
            'organization_name': 'ODK MCP System',
            'include_toc': True,
            'max_image_width': '800px',
            'max_image_height': '600px'
        }
        
        if not config_path:
            return default_config
        
        try:
            with open(config_path, 'r') as f:
                user_config = json.load(f)
                # Merge user config with defaults
                for key, value in user_config.items():
                    default_config[key] = value
                return default_config
        except Exception as e:
            logger.warning(f"Failed to load config from {config_path}: {e}")
            return default_config
    
    def _ensure_templates_exist(self):
        """
        Ensure that template files exist, creating default ones if needed.
        """
        os.makedirs(self.config['templates_dir'], exist_ok=True)
        
        # Default Markdown template
        default_md_path = os.path.join(self.config['templates_dir'], 'default_report.md')
        if not os.path.exists(default_md_path):
            with open(default_md_path, 'w') as f:
                f.write("""# {{ report_title }}

**Generated on:** {{ timestamp }}
**Project:** {{ project_id }}
{% if form_id %}**Form:** {{ form_id }}{% endif %}

{% if include_toc %}
## Table of Contents
{% for section in sections %}
- [{{ section.title }}](#{{ section.id }})
{% endfor %}
{% endif %}

{% for section in sections %}
## {{ section.title }} {#{{ section.id }}}

{{ section.content }}

{% if section.images %}
{% for image in section.images %}
![{{ image.title }}]({{ image.data }})
{% endfor %}
{% endif %}

{% endfor %}

---
Generated by {{ organization_name }}
""")
        
        # Default HTML template
        default_html_path = os.path.join(self.config['templates_dir'], 'default_report.html')
        if not os.path.exists(default_html_path):
            with open(default_html_path, 'w') as f:
                f.write("""<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ report_title }}</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            color: #333;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        .header {
            margin-bottom: 30px;
            border-bottom: 1px solid #ddd;
            padding-bottom: 10px;
        }
        .header img {
            max-height: 80px;
        }
        h1 {
            color: #2c3e50;
        }
        h2 {
            color: #3498db;
            margin-top: 30px;
        }
        h3 {
            color: #2980b9;
        }
        .metadata {
            background-color: #f8f9fa;
            padding: 10px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        .metadata p {
            margin: 5px 0;
        }
        .section {
            margin-bottom: 30px;
        }
        .image-container {
            margin: 20px 0;
            text-align: center;
        }
        .image-container img {
            max-width: {{ max_image_width }};
            max-height: {{ max_image_height }};
            border: 1px solid #ddd;
            border-radius: 5px;
            box-shadow: 0 0 5px rgba(0,0,0,0.1);
        }
        table {
            border-collapse: collapse;
            width: 100%;
            margin: 20px 0;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        .footer {
            margin-top: 50px;
            border-top: 1px solid #ddd;
            padding-top: 10px;
            font-size: 0.8em;
            color: #777;
        }
        .toc {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 30px;
        }
        .toc ul {
            list-style-type: none;
            padding-left: 20px;
        }
        .toc li {
            margin-bottom: 5px;
        }
        .toc a {
            text-decoration: none;
            color: #3498db;
        }
        .toc a:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            {% if logo_path %}
            <img src="{{ logo_path }}" alt="Logo">
            {% endif %}
            <h1>{{ report_title }}</h1>
        </div>
        
        <div class="metadata">
            <p><strong>Generated on:</strong> {{ timestamp }}</p>
            <p><strong>Project:</strong> {{ project_id }}</p>
            {% if form_id %}<p><strong>Form:</strong> {{ form_id }}</p>{% endif %}
        </div>
        
        {% if include_toc %}
        <div class="toc">
            <h2>Table of Contents</h2>
            <ul>
                {% for section in sections %}
                <li><a href="#{{ section.id }}">{{ section.title }}</a></li>
                {% endfor %}
            </ul>
        </div>
        {% endif %}
        
        {% for section in sections %}
        <div class="section" id="{{ section.id }}">
            <h2>{{ section.title }}</h2>
            {{ section.content|safe }}
            
            {% if section.images %}
            {% for image in section.images %}
            <div class="image-container">
                <img src="{{ image.data }}" alt="{{ image.title }}">
                <p>{{ image.title }}</p>
            </div>
            {% endfor %}
            {% endif %}
        </div>
        {% endfor %}
        
        <div class="footer">
            <p>Generated by {{ organization_name }}</p>
        </div>
    </div>
</body>
</html>
""")
        
        # Default CSS for PDF
        default_css_path = os.path.join(self.config['templates_dir'], 'default_style.css')
        if not os.path.exists(default_css_path):
            with open(default_css_path, 'w') as f:
                f.write("""@page {
    margin: 1cm;
    @top-center {
        content: "{{ report_title }}";
        font-size: 10pt;
        color: #666;
    }
    @bottom-right {
        content: "Page " counter(page) " of " counter(pages);
        font-size: 10pt;
        color: #666;
    }
}

body {
    font-family: Arial, sans-serif;
    line-height: 1.6;
    margin: 0;
    padding: 20px;
    color: #333;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
}

.header {
    margin-bottom: 30px;
    border-bottom: 1px solid #ddd;
    padding-bottom: 10px;
}

.header img {
    max-height: 80px;
}

h1 {
    color: #2c3e50;
    font-size: 24pt;
    margin-bottom: 10px;
}

h2 {
    color: #3498db;
    font-size: 18pt;
    margin-top: 30px;
    break-after: avoid;
}

h3 {
    color: #2980b9;
    font-size: 14pt;
    break-after: avoid;
}

.metadata {
    background-color: #f8f9fa;
    padding: 10px;
    border-radius: 5px;
    margin-bottom: 20px;
}

.metadata p {
    margin: 5px 0;
}

.section {
    margin-bottom: 30px;
}

.image-container {
    margin: 20px 0;
    text-align: center;
}

.image-container img {
    max-width: {{ max_image_width }};
    max-height: {{ max_image_height }};
    border: 1px solid #ddd;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(0,0,0,0.1);
}

table {
    border-collapse: collapse;
    width: 100%;
    margin: 20px 0;
}

th, td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: left;
}

th {
    background-color: #f2f2f2;
}

tr:nth-child(even) {
    background-color: #f9f9f9;
}

.footer {
    margin-top: 50px;
    border-top: 1px solid #ddd;
    padding-top: 10px;
    font-size: 0.8em;
    color: #777;
}

.toc {
    background-color: #f8f9fa;
    padding: 15px;
    border-radius: 5px;
    margin-bottom: 30px;
}

.toc ul {
    list-style-type: none;
    padding-left: 20px;
}

.toc li {
    margin-bottom: 5px;
}

.toc a {
    text-decoration: none;
    color: #3498db;
}

.page-break {
    page-break-after: always;
}
""")
    
    def _create_section_id(self, title: str) -> str:
        """
        Create a section ID from a title.
        
        Args:
            title (str): Section title.
            
        Returns:
            str: Section ID.
        """
        # Convert to lowercase
        section_id = title.lower()
        
        # Replace spaces with hyphens
        section_id = section_id.replace(' ', '-')
        
        # Remove special characters
        section_id = re.sub(r'[^a-z0-9-]', '', section_id)
        
        return section_id
    
    def _convert_markdown_to_html(self, markdown_text: str) -> str:
        """
        Convert Markdown text to HTML.
        
        Args:
            markdown_text (str): Markdown text.
            
        Returns:
            str: HTML text.
        """
        return markdown.markdown(markdown_text, extensions=['tables', 'fenced_code'])
    
    def compile_summary_report(self, project_id: str, form_id: Optional[str] = None,
                              report_title: Optional[str] = None,
                              sections: Optional[List[Dict]] = None,
                              descriptive_results: Optional[Dict] = None,
                              inferential_results: Optional[Dict] = None,
                              exploration_results: Optional[Dict] = None) -> Dict:
        """
        Compile a summary report from analysis results.
        
        Args:
            project_id (str): Project ID.
            form_id (str, optional): Form ID.
            report_title (str, optional): Report title.
            sections (List[Dict], optional): Pre-defined report sections.
            descriptive_results (Dict, optional): Results from Descriptive Analytics Agent.
            inferential_results (Dict, optional): Results from Inferential Statistics Agent.
            exploration_results (Dict, optional): Results from Data Exploration Agent.
            
        Returns:
            Dict: Compiled report data.
        """
        try:
            # Ensure templates exist
            self._ensure_templates_exist()
            
            # Set default report title if not provided
            if not report_title:
                report_title = f"Data Analysis Report: {project_id}"
                if form_id:
                    report_title += f" - {form_id}"
            
            # Initialize report data
            report_data = {
                'report_title': report_title,
                'project_id': project_id,
                'form_id': form_id,
                'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                'organization_name': self.config['organization_name'],
                'logo_path': self.config['logo_path'],
                'include_toc': self.config['include_toc'],
                'max_image_width': self.config['max_image_width'],
                'max_image_height': self.config['max_image_height'],
                'sections': []
            }
            
            # Add pre-defined sections if provided
            if sections:
                for section in sections:
                    if 'title' in section and 'content' in section:
                        section_data = {
                            'id': section.get('id', self._create_section_id(section['title'])),
                            'title': section['title'],
                            'content': section['content'],
                            'images': section.get('images', [])
                        }
                        report_data['sections'].append(section_data)
            
            # Process descriptive results if provided
            if descriptive_results and descriptive_results.get('status') == 'success':
                # Add data overview section
                data_shape = descriptive_results.get('data_shape', {})
                overview_content = f"""
### Data Overview

This report analyzes data from project **{project_id}**"""
                if form_id:
                    overview_content += f", form **{form_id}**"
                overview_content += ".\n\n"
                
                if data_shape:
                    overview_content += f"- **Total records:** {data_shape.get('rows', 'N/A')}\n"
                    overview_content += f"- **Total variables:** {data_shape.get('columns', 'N/A')}\n\n"
                
                overview_section = {
                    'id': 'data-overview',
                    'title': 'Data Overview',
                    'content': overview_content,
                    'images': []
                }
                report_data['sections'].append(overview_section)
                
                # Add summary statistics section
                summary_stats = descriptive_results.get('summary_statistics', {})
                if summary_stats:
                    stats_content = "### Summary Statistics\n\n"
                    stats_content += "The following table shows summary statistics for numeric variables:\n\n"
                    stats_content += "| Variable | Count | Mean | Std Dev | Min | 25% | Median | 75% | Max |\n"
                    stats_content += "|----------|-------|------|---------|-----|-----|--------|-----|-----|\n"
                    
                    for var, stats in summary_stats.items():
                        if 'mean' in stats:  # Only include numeric variables
                            stats_content += f"| {var} | {stats.get('count', 'N/A')} | "
                            stats_content += f"{stats.get('mean', 'N/A'):.2f} | "
                            stats_content += f"{stats.get('std', 'N/A'):.2f} | "
                            stats_content += f"{stats.get('min', 'N/A'):.2f} | "
                            stats_content += f"{stats.get('q1', 'N/A'):.2f} | "
                            stats_content += f"{stats.get('median', 'N/A'):.2f} | "
                            stats_content += f"{stats.get('q3', 'N/A'):.2f} | "
                            stats_content += f"{stats.get('max', 'N/A'):.2f} |\n"
                    
                    stats_section = {
                        'id': 'summary-statistics',
                        'title': 'Summary Statistics',
                        'content': stats_content,
                        'images': []
                    }
                    report_data['sections'].append(stats_section)
                
                # Add frequency tables section
                freq_tables = descriptive_results.get('frequency_tables', {})
                if freq_tables:
                    freq_content = "### Frequency Distributions\n\n"
                    freq_content += "The following tables show frequency distributions for categorical variables:\n\n"
                    
                    for var, freq in freq_tables.items():
                        freq_content += f"#### {var}\n\n"
                        freq_content += "| Value | Frequency |\n"
                        freq_content += "|-------|----------|\n"
                        
                        for value, count in freq.items():
                            freq_content += f"| {value} | {count} |\n"
                        
                        freq_content += "\n"
                    
                    freq_section = {
                        'id': 'frequency-distributions',
                        'title': 'Frequency Distributions',
                        'content': freq_content,
                        'images': []
                    }
                    report_data['sections'].append(freq_section)
                
                # Add visualizations section
                visualizations = descriptive_results.get('visualizations', [])
                if visualizations:
                    viz_content = "### Data Visualizations\n\n"
                    viz_content += "The following visualizations provide insights into the data distribution and relationships:\n\n"
                    
                    viz_images = []
                    for viz in visualizations:
                        if 'image_base64' in viz:
                            viz_title = viz.get('title', f"Visualization of {viz.get('column', 'data')}")
                            viz_images.append({
                                'title': viz_title,
                                'data': f"data:image/png;base64,{viz['image_base64']}"
                            })
                    
                    viz_section = {
                        'id': 'data-visualizations',
                        'title': 'Data Visualizations',
                        'content': viz_content,
                        'images': viz_images
                    }
                    report_data['sections'].append(viz_section)
            
            # Process inferential results if provided
            if inferential_results and inferential_results.get('status') == 'success':
                analyses = inferential_results.get('analyses', [])
                
                # Add correlation analysis section
                correlation_analyses = [a for a in analyses if a.get('type') == 'correlation']
                if correlation_analyses:
                    corr_content = "### Correlation Analysis\n\n"
                    corr_content += "The following correlation analysis shows relationships between numeric variables:\n\n"
                    
                    corr_images = []
                    for analysis in correlation_analyses:
                        result = analysis.get('result', {})
                        if 'visualization' in result and 'image_base64' in result['visualization']:
                            corr_title = f"Correlation Matrix ({result.get('method', 'pearson').capitalize()})"
                            corr_images.append({
                                'title': corr_title,
                                'data': f"data:image/png;base64,{result['visualization']['image_base64']}"
                            })
                    
                    corr_section = {
                        'id': 'correlation-analysis',
                        'title': 'Correlation Analysis',
                        'content': corr_content,
                        'images': corr_images
                    }
                    report_data['sections'].append(corr_section)
                
                # Add hypothesis tests section
                t_test_analyses = [a for a in analyses if a.get('type') == 't_tests']
                anova_analyses = [a for a in analyses if a.get('type') == 'anova']
                chi_square_analyses = [a for a in analyses if a.get('type') == 'chi_square']
                
                if t_test_analyses or anova_analyses or chi_square_analyses:
                    tests_content = "### Hypothesis Tests\n\n"
                    tests_content += "The following hypothesis tests were conducted to examine relationships in the data:\n\n"
                    
                    tests_images = []
                    
                    # T-tests
                    if t_test_analyses:
                        tests_content += "#### T-Tests\n\n"
                        for analysis in t_test_analyses:
                            results = analysis.get('results', [])
                            for result in results:
                                test_type = result.get('test_type', 'one_sample_t_test')
                                variable = result.get('variable', 'unknown')
                                p_value = result.get('p_value', 'N/A')
                                significant = result.get('significant', False)
                                
                                if test_type == 'independent_two_sample_t_test':
                                    group_var = result.get('group_variable', 'unknown')
                                    tests_content += f"- **{variable}** by **{group_var}**: p-value = {p_value:.4f}"
                                    if significant:
                                        tests_content += " (significant)"
                                    tests_content += "\n"
                                else:
                                    tests_content += f"- **{variable}** (one-sample): p-value = {p_value:.4f}"
                                    if significant:
                                        tests_content += " (significant)"
                                    tests_content += "\n"
                                
                                if 'visualization' in result and 'image_base64' in result['visualization']:
                                    test_title = f"T-Test: {variable}"
                                    if test_type == 'independent_two_sample_t_test':
                                        test_title += f" by {result.get('group_variable', 'group')}"
                                    tests_images.append({
                                        'title': test_title,
                                        'data': f"data:image/png;base64,{result['visualization']['image_base64']}"
                                    })
                        
                        tests_content += "\n"
                    
                    # ANOVA
                    if anova_analyses:
                        tests_content += "#### ANOVA Tests\n\n"
                        for analysis in anova_analyses:
                            results = analysis.get('results', [])
                            for result in results:
                                variable = result.get('variable', 'unknown')
                                group_var = result.get('group_variable', 'unknown')
                                p_value = result.get('p_value', 'N/A')
                                significant = result.get('significant', False)
                                
                                tests_content += f"- **{variable}** by **{group_var}**: p-value = {p_value:.4f}"
                                if significant:
                                    tests_content += " (significant)"
                                tests_content += "\n"
                                
                                if 'visualization' in result and 'image_base64' in result['visualization']:
                                    test_title = f"ANOVA: {variable} by {group_var}"
                                    tests_images.append({
                                        'title': test_title,
                                        'data': f"data:image/png;base64,{result['visualization']['image_base64']}"
                                    })
                        
                        tests_content += "\n"
                    
                    # Chi-square
                    if chi_square_analyses:
                        tests_content += "#### Chi-Square Tests\n\n"
                        for analysis in chi_square_analyses:
                            results = analysis.get('results', [])
                            for result in results:
                                var1 = result.get('variable1', 'unknown')
                                var2 = result.get('variable2', 'unknown')
                                p_value = result.get('p_value', 'N/A')
                                significant = result.get('significant', False)
                                
                                tests_content += f"- **{var1}** vs **{var2}**: p-value = {p_value:.4f}"
                                if significant:
                                    tests_content += " (significant)"
                                tests_content += "\n"
                                
                                if 'visualization' in result and 'image_base64' in result['visualization']:
                                    test_title = f"Chi-Square: {var1} vs {var2}"
                                    tests_images.append({
                                        'title': test_title,
                                        'data': f"data:image/png;base64,{result['visualization']['image_base64']}"
                                    })
                    
                    tests_section = {
                        'id': 'hypothesis-tests',
                        'title': 'Hypothesis Tests',
                        'content': tests_content,
                        'images': tests_images
                    }
                    report_data['sections'].append(tests_section)
                
                # Add regression analysis section
                regression_analyses = [a for a in analyses if a.get('type') == 'regression']
                if regression_analyses:
                    reg_content = "### Regression Analysis\n\n"
                    reg_content += "The following regression models were fitted to the data:\n\n"
                    
                    reg_images = []
                    for analysis in regression_analyses:
                        results = analysis.get('results', [])
                        for result in results:
                            model_type = result.get('model_type', 'linear_regression')
                            dependent = result.get('dependent_variable', 'unknown')
                            
                            if model_type == 'linear_regression':
                                r_squared = result.get('r_squared', 'N/A')
                                f_pvalue = result.get('f_pvalue', 'N/A')
                                
                                reg_content += f"#### Linear Regression: {dependent}\n\n"
                                reg_content += f"- R² = {r_squared:.4f}\n"
                                reg_content += f"- F-test p-value = {f_pvalue:.4f}\n"
                                
                                if 'coefficients' in result:
                                    reg_content += "- Coefficients:\n"
                                    for var, coef in result['coefficients'].items():
                                        p_value = result.get('p_values', {}).get(var, 'N/A')
                                        if isinstance(p_value, float):
                                            stars = ''
                                            if p_value < 0.001:
                                                stars = '***'
                                            elif p_value < 0.01:
                                                stars = '**'
                                            elif p_value < 0.05:
                                                stars = '*'
                                            
                                            reg_content += f"  - {var}: {coef:.4f} {stars}\n"
                                
                                reg_content += "\n"
                            
                            elif model_type == 'logistic_regression':
                                accuracy = result.get('metrics', {}).get('accuracy', 'N/A')
                                roc_auc = result.get('metrics', {}).get('roc_auc', 'N/A')
                                
                                reg_content += f"#### Logistic Regression: {dependent}\n\n"
                                reg_content += f"- Accuracy = {accuracy:.4f}\n"
                                reg_content += f"- ROC AUC = {roc_auc:.4f}\n"
                                
                                if 'coefficients' in result:
                                    reg_content += "- Coefficients:\n"
                                    for var, coef in result['coefficients'].items():
                                        if var != 'intercept':
                                            odds = result.get('odds_ratios', {}).get(var, 'N/A')
                                            reg_content += f"  - {var}: {coef:.4f} (Odds Ratio: {odds:.4f})\n"
                                
                                reg_content += "\n"
                            
                            if 'visualization' in result and 'image_base64' in result['visualization']:
                                reg_title = f"{model_type.replace('_', ' ').title()}: {dependent}"
                                reg_images.append({
                                    'title': reg_title,
                                    'data': f"data:image/png;base64,{result['visualization']['image_base64']}"
                                })
                    
                    reg_section = {
                        'id': 'regression-analysis',
                        'title': 'Regression Analysis',
                        'content': reg_content,
                        'images': reg_images
                    }
                    report_data['sections'].append(reg_section)
            
            # Process exploration results if provided
            if exploration_results and exploration_results.get('status') == 'success':
                explore_content = "### Data Exploration\n\n"
                
                # Add data shape information
                original_shape = exploration_results.get('original_data_shape', {})
                filtered_shape = exploration_results.get('filtered_data_shape', {})
                
                if original_shape:
                    explore_content += f"- Original data: {original_shape.get('rows', 'N/A')} rows, {original_shape.get('columns', 'N/A')} columns\n"
                
                if filtered_shape:
                    explore_content += f"- After filtering: {filtered_shape.get('rows', 'N/A')} rows, {filtered_shape.get('columns', 'N/A')} columns\n"
                
                explore_content += "\n"
                
                # Add plot if available
                explore_images = []
                if 'plot' in exploration_results and 'image_base64' in exploration_results['plot']:
                    plot = exploration_results['plot']
                    plot_type = plot.get('plot_type', 'unknown')
                    plot_title = plot.get('title', f"{plot_type.capitalize()} Plot")
                    
                    explore_images.append({
                        'title': plot_title,
                        'data': f"data:image/png;base64,{plot['image_base64']}"
                    })
                
                explore_section = {
                    'id': 'data-exploration',
                    'title': 'Data Exploration',
                    'content': explore_content,
                    'images': explore_images
                }
                report_data['sections'].append(explore_section)
            
            # Add conclusions section if we have enough data
            if len(report_data['sections']) > 1:
                conclusions_content = "### Key Findings\n\n"
                conclusions_content += "Based on the analysis, the following key findings were identified:\n\n"
                
                # Add placeholder for key findings
                conclusions_content += "1. [Key finding 1]\n"
                conclusions_content += "2. [Key finding 2]\n"
                conclusions_content += "3. [Key finding 3]\n\n"
                
                conclusions_content += "### Recommendations\n\n"
                conclusions_content += "Based on these findings, the following recommendations are suggested:\n\n"
                
                # Add placeholder for recommendations
                conclusions_content += "1. [Recommendation 1]\n"
                conclusions_content += "2. [Recommendation 2]\n"
                conclusions_content += "3. [Recommendation 3]\n"
                
                conclusions_section = {
                    'id': 'conclusions',
                    'title': 'Conclusions and Recommendations',
                    'content': conclusions_content,
                    'images': []
                }
                report_data['sections'].append(conclusions_section)
            
            return report_data
            
        except Exception as e:
            logger.error(f"Error compiling summary report: {e}")
            return {
                'status': 'error',
                'message': str(e),
                'timestamp': datetime.now().isoformat()
            }
    
    def add_charts_to_report(self, report_data: Dict, charts: List[Dict]) -> Dict:
        """
        Add charts to an existing report.
        
        Args:
            report_data (Dict): Report data.
            charts (List[Dict]): Charts to add.
                Format: [
                    {
                        'section_id': 'section-id',
                        'title': 'Chart Title',
                        'image_base64': 'base64-encoded-image'
                    },
                    ...
                ]
            
        Returns:
            Dict: Updated report data.
        """
        try:
            if not charts:
                return report_data
            
            # Group charts by section
            charts_by_section = {}
            for chart in charts:
                section_id = chart.get('section_id')
                if section_id:
                    if section_id not in charts_by_section:
                        charts_by_section[section_id] = []
                    
                    charts_by_section[section_id].append({
                        'title': chart.get('title', 'Chart'),
                        'data': f"data:image/png;base64,{chart.get('image_base64', '')}"
                    })
            
            # Add charts to sections
            for section in report_data.get('sections', []):
                section_id = section.get('id')
                if section_id in charts_by_section:
                    if 'images' not in section:
                        section['images'] = []
                    
                    section['images'].extend(charts_by_section[section_id])
            
            return report_data
            
        except Exception as e:
            logger.error(f"Error adding charts to report: {e}")
            return report_data
    
    def export_report(self, report_data: Dict, output_format: str = 'markdown',
                     output_path: Optional[str] = None,
                     template_name: Optional[str] = None) -> Dict:
        """
        Export report to the specified format.
        
        Args:
            report_data (Dict): Report data.
            output_format (str): Output format ('markdown', 'html', 'pdf').
            output_path (str, optional): Output file path. If None, uses default.
            template_name (str, optional): Template name. If None, uses default.
            
        Returns:
            Dict: Export result.
        """
        try:
            # Ensure output directory exists
            os.makedirs(self.config['output_dir'], exist_ok=True)
            
            # Set default output path if not provided
            if not output_path:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"report_{timestamp}"
                
                if output_format == 'markdown':
                    filename += '.md'
                elif output_format == 'html':
                    filename += '.html'
                elif output_format == 'pdf':
                    filename += '.pdf'
                else:
                    return {
                        'status': 'error',
                        'message': f"Unsupported output format: {output_format}"
                    }
                
                output_path = os.path.join(self.config['output_dir'], filename)
            
            # Set default template name if not provided
            if not template_name:
                if output_format == 'markdown':
                    template_name = 'default_report.md'
                elif output_format in ['html', 'pdf']:
                    template_name = 'default_report.html'
            
            # Load template
            try:
                template = self.jinja_env.get_template(template_name)
            except jinja2.exceptions.TemplateNotFound:
                logger.warning(f"Template {template_name} not found, using default")
                self._ensure_templates_exist()
                
                if output_format == 'markdown':
                    template = self.jinja_env.get_template('default_report.md')
                elif output_format in ['html', 'pdf']:
                    template = self.jinja_env.get_template('default_report.html')
            
            # Render template
            rendered_content = template.render(**report_data)
            
            # Export based on format
            if output_format == 'markdown':
                with open(output_path, 'w') as f:
                    f.write(rendered_content)
            
            elif output_format == 'html':
                with open(output_path, 'w') as f:
                    f.write(rendered_content)
            
            elif output_format == 'pdf':
                # For PDF, we need to convert HTML to PDF
                # First, render HTML
                html_content = rendered_content
                
                # Load CSS
                css_path = os.path.join(self.config['templates_dir'], self.config['default_css'])
                css = None
                if os.path.exists(css_path):
                    with open(css_path, 'r') as f:
                        css_template = jinja2.Template(f.read())
                        css_content = css_template.render(**report_data)
                        css = CSS(string=css_content)
                
                # Convert HTML to PDF
                html = HTML(string=html_content)
                html.write_pdf(output_path, stylesheets=[css] if css else None)
            
            return {
                'status': 'success',
                'format': output_format,
                'path': output_path,
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"Error exporting report: {e}")
            return {
                'status': 'error',
                'message': str(e),
                'timestamp': datetime.now().isoformat()
            }
    
    def generate_report(self, project_id: str, form_id: Optional[str] = None,
                       report_title: Optional[str] = None,
                       sections: Optional[List[Dict]] = None,
                       descriptive_results: Optional[Dict] = None,
                       inferential_results: Optional[Dict] = None,
                       exploration_results: Optional[Dict] = None,
                       output_format: str = 'pdf',
                       output_path: Optional[str] = None,
                       template_name: Optional[str] = None) -> Dict:
        """
        Generate a complete report from analysis results.
        
        Args:
            project_id (str): Project ID.
            form_id (str, optional): Form ID.
            report_title (str, optional): Report title.
            sections (List[Dict], optional): Pre-defined report sections.
            descriptive_results (Dict, optional): Results from Descriptive Analytics Agent.
            inferential_results (Dict, optional): Results from Inferential Statistics Agent.
            exploration_results (Dict, optional): Results from Data Exploration Agent.
            output_format (str): Output format ('markdown', 'html', 'pdf').
            output_path (str, optional): Output file path. If None, uses default.
            template_name (str, optional): Template name. If None, uses default.
            
        Returns:
            Dict: Generation result.
        """
        try:
            # Compile report data
            report_data = self.compile_summary_report(
                project_id, form_id, report_title, sections,
                descriptive_results, inferential_results, exploration_results
            )
            
            if not report_data or 'sections' not in report_data:
                return {
                    'status': 'error',
                    'message': 'Failed to compile report data',
                    'timestamp': datetime.now().isoformat()
                }
            
            # Export report
            export_result = self.export_report(
                report_data, output_format, output_path, template_name
            )
            
            return export_result
            
        except Exception as e:
            logger.error(f"Error generating report: {e}")
            return {
                'status': 'error',
                'message': str(e),
                'timestamp': datetime.now().isoformat()
            }

# Example usage
if __name__ == "__main__":
    # This would be called by the agent framework or directly
    agent = ReportGenerationAgent()
    
    # Example report generation
    result = agent.generate_report(
        project_id="sample_project",
        form_id="sample_form",
        report_title="Sample Data Analysis Report",
        output_format="pdf"
    )
    
    print(json.dumps(result, indent=2))

